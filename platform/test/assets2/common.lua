---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ADMIN.
--- DateTime: 2022/3/30 10:19
---
local graphics = require("graphics")
local M = {}
function M.isExist(obj)
    if obj == nil or obj._proxy == nil or obj._isRemove then
        return false
    end
    return true
end

function M.setXY(object, x, y)
    local x = x or 0;
    local y = y or 0;
    object.x = x;
    object.y = y;
end

function M.setAnchor(object, anchorX, anchorY, isSetChild)
    local anchorX = anchorX or 0
    local anchorY = anchorY or anchorX or 0
    if (nil ~= object) then
        object.anchorX = anchorX
        object.anchorY = anchorY
        if isSetChild == true then --同样设置子对象的锚点
            object.anchorChildren = true
        end
    end
end



local function createNinePatchImage(params)
    local params = params or {}
    local tHeight = params.tHeight
    local tWidth = params.tWidth
    local imgPath = params.imgPath
    local width = params.width
    local height = params.height
    local initX = params.initX or 0
    local initY = params.initY or 0
    local isFixPosX = params.isFixPosX -- 修正图片位置

    -- 九宫格图片组
    local ninePatchGroup = display.newGroup()
    ninePatchGroup.width = width
    ninePatchGroup.height = height

    local temp = display.newImage(imgPath)
    local imgWidth = temp.width
    local imgHeight = temp.height
    temp:removeSelf()
    temp = nil

    local imgSheetOptions = {
        frames = {
            -- 左上角图片
            {
                x = initX,
                y = initY,
                width = tWidth[1],
                height = tHeight[1]
            },
            -- 上部中间图片
            {
                x = tWidth[1] + initX,
                y = initY,
                width = tWidth[2],
                height = tHeight[1]
            },
            -- 右上角图片
            {
                x = tWidth[1] + tWidth[2] + initX,
                y = initY,
                width = tWidth[3],
                height = tHeight[1]
            },
            -- 中部左
            {
                x = initX,
                y = tHeight[1] + initY,
                width = tWidth[4],
                height = tHeight[2]
            },
            -- 中间
            {
                x = tWidth[4] + initX,
                y = tHeight[1] + initY,
                width = tWidth[5],
                height = tHeight[2]
            },
            -- 中部右
            {
                x = tWidth[4] + tWidth[5] + initX,
                y = tHeight[1] + initY,
                width = tWidth[6],
                height = tHeight[2]
            },
            -- 左下角
            {
                x = initX,
                y = tHeight[1] + tHeight[2] + initY,
                width = tWidth[7],
                height = tHeight[3]
            },
            -- 下部中间
            {
                x = tWidth[7] + initX,
                y = tHeight[1] + tHeight[2] + initY,
                width = tWidth[8],
                height = tHeight[3]
            },
            -- 右下角
            {
                x = tWidth[7] + tWidth[8] + initX,
                y = tHeight[1] + tHeight[2] + initY,
                width = tWidth[9],
                height = tHeight[3]
            }
        },
        sheetContentWidth = imgWidth,
        sheetContentHeight = imgHeight
    }
    local imgSheet = graphics.newImageSheet(imgPath, imgSheetOptions)

    -- 中间
    local imgMiddle = display.newImageRect(imgSheet, 5,
        width - imgSheetOptions.frames[4].width - imgSheetOptions.frames[6].width,
        height - imgSheetOptions.frames[2].height - imgSheetOptions.frames[8].height)
    ninePatchGroup:insert(imgMiddle)
    ninePatchGroup.imgMiddle = imgMiddle
    if isFixPosX then
        imgMiddle.x = -(imgSheetOptions.frames[6].width - imgSheetOptions.frames[4].width) * .5
    end
    -- 中部左
    local imgMiddleLeft = display.newImageRect(imgSheet, 4, imgSheetOptions.frames[4].width, imgMiddle.height)
    M.setAnchor(imgMiddleLeft, 1, 0.5)
    M.setXY(imgMiddleLeft, imgMiddle.x - imgMiddle.width / 2, 0)
    ninePatchGroup:insert(imgMiddleLeft)
    ninePatchGroup.imgMiddleLeft = imgMiddleLeft
    -- 中部右
    local imgMiddleRight = display.newImageRect(imgSheet, 6, imgSheetOptions.frames[6].width, imgMiddle.height)
    M.setAnchor(imgMiddleRight, 0, 0.5)
    M.setXY(imgMiddleRight, imgMiddle.x + imgMiddle.width / 2, 0)
    ninePatchGroup:insert(imgMiddleRight)
    ninePatchGroup.imgMiddleRight = imgMiddleRight
    -- 上部中间图片
    local imgTopMiddle = display.newImageRect(imgSheet, 2,
        width - imgSheetOptions.frames[1].width - imgSheetOptions.frames[3].width, imgSheetOptions.frames[2].height)
    M.setAnchor(imgTopMiddle, 0.5, 1)
    M.setXY(imgTopMiddle, imgMiddle.x, -imgMiddle.height / 2)
    ninePatchGroup:insert(imgTopMiddle)
    ninePatchGroup.imgTopMiddle = imgTopMiddle
    -- 左上角图片
    local imgTopLeft = display.newImage(imgSheet, 1)
    M.setAnchor(imgTopLeft, 1, 1)
    M.setXY(imgTopLeft, imgMiddleLeft.x, imgTopMiddle.y)
    ninePatchGroup:insert(imgTopLeft)
    ninePatchGroup.imgTopLeft = imgTopLeft
    -- 右上角图片
    local imgTopRight = display.newImage(imgSheet, 3)
    M.setAnchor(imgTopRight, 0, 1)
    M.setXY(imgTopRight, imgMiddleRight.x, imgTopMiddle.y)
    ninePatchGroup:insert(imgTopRight)
    ninePatchGroup.imgTopRight = imgTopRight
    -- 下部中间
    local imgDownMiddle = display.newImageRect(imgSheet, 8,
        width - imgSheetOptions.frames[7].width - imgSheetOptions.frames[9].width, imgSheetOptions.frames[7].height)
    M.setAnchor(imgDownMiddle, 0.5, 0)
    M.setXY(imgDownMiddle, imgMiddle.x, imgMiddle.height / 2)
    ninePatchGroup:insert(imgDownMiddle)
    ninePatchGroup.imgDownMiddle = imgDownMiddle
    -- 左下角
    local imgDownLeft = display.newImage(imgSheet, 7)
    M.setAnchor(imgDownLeft, 1, 0)
    M.setXY(imgDownLeft, imgMiddleLeft.x, imgDownMiddle.y)
    ninePatchGroup:insert(imgDownLeft)
    ninePatchGroup.imgDownLeft = imgDownLeft
    -- 右下角
    local imgDownRight = display.newImage(imgSheet, 9)
    M.setAnchor(imgDownRight, 0, 0)
    M.setXY(imgDownRight, imgMiddleRight.x, imgDownMiddle.y)
    ninePatchGroup:insert(imgDownRight)
    ninePatchGroup.imgDownRight = imgDownRight
    function ninePatchGroup:resetHeight(newHeight)
        -- 中间部分
        imgMiddle.height = newHeight - imgSheetOptions.frames[2].height - imgSheetOptions.frames[8].height
        imgMiddleLeft.height = imgMiddle.height
        imgMiddleRight.height = imgMiddle.height

        -- 上方部分
        imgTopMiddle.y = -imgMiddle.height / 2
        imgTopLeft.y = imgTopMiddle.y
        imgTopRight.y = imgTopMiddle.y

        -- 下方部分
        imgDownMiddle.y = imgMiddle.height / 2
        imgDownLeft.y = imgDownMiddle.y
        imgDownRight.y = imgDownMiddle.y
    end

    function ninePatchGroup:resetWidth(newWidth)
        --中间部分
        imgMiddle.width = newWidth - imgSheetOptions.frames[4].width - imgSheetOptions.frames[6].width
        imgTopMiddle.width = imgMiddle.width
        imgDownMiddle.width = imgMiddle.width


        -- 左边部分
        imgMiddleLeft.x = imgMiddle.x - imgMiddle.width * 0.5
        imgTopLeft.x = imgMiddleLeft.x
        imgDownLeft.x = imgMiddleLeft.x

        --右边部分
        imgMiddleRight.x = imgMiddle.x + imgMiddle.width * 0.5
        imgTopRight.x = imgMiddleRight.x
        imgDownRight.x = imgMiddleRight.x
    end

    return ninePatchGroup
end

function M.createRegularNinePatchImage(params)
    local params = params or {}
    local imgPath = params.imgPath
    local cornerWidth = params.cornerWidth
    local rightCorWidth = params.rightCorWidth
    local cornerHeight = params.cornerHeight
    local btmCorHeight = params.btmCorHeight
    local topCorSize = params.topCorSize or {}
    local bottomCorSize = params.bottomCorSize or {}
    local width = params.width or display.contentWidth
    local height = params.height or display.contentHeight
    local color = params.color
    local maskW = params.maskW
    local maskH = params.maskH
    local is1PixelW = params.is1PixelW
    local is1PixelH = params.is1PixelH
    local is1PixelBoth = params.is1PixelBoth
    local initX = params.initX
    local initY = params.initY
    local isFixPosX = params.isFixPosX -- 修正图片位置,用于是否传入rightCorWidth时,创建出的图片位置不一致问题

    local temp = display.newImage(imgPath)
    local imgWidth = params.imgWidth or temp.width
    local imgHeight = params.imgHeight or temp.height
    temp:removeSelf()
    temp = nil

    if is1PixelW then
        cornerWidth = imgWidth / 2 - 0.5
        cornerHeight = imgHeight / 2
        height = imgHeight
    elseif is1PixelH then
        cornerWidth = imgWidth / 2
        cornerHeight = imgHeight / 2 - 0.5
        width = imgWidth
    elseif is1PixelBoth then
        cornerWidth = imgWidth / 2 - 0.5
        cornerHeight = imgHeight / 2 - 0.5
    end

    local topLetWidth = topCorSize.width
    local topRigWidth = topCorSize.width

    local btmLetWidth = bottomCorSize.width
    local btmRigWidth = bottomCorSize.width

    local topHeight = topCorSize.height
    local btmHeight = bottomCorSize.height
    if cornerWidth and cornerHeight then
        if rightCorWidth then
            topLetWidth = cornerWidth
            topRigWidth = rightCorWidth
        else
            topLetWidth = cornerWidth
            topRigWidth = cornerWidth
        end
        if btmCorHeight then
            topHeight = cornerHeight
            btmHeight = btmCorHeight
        else
            topHeight = cornerHeight
            btmHeight = cornerHeight
        end
        btmLetWidth = cornerWidth
        btmRigWidth = topRigWidth
        -- topCorSize.height = cornerHeight
        -- bottomCorSize.height = cornerHeight
    end
    local regularNinePathImgGroup = createNinePatchImage {
        tHeight = { topHeight, imgHeight - (topHeight + btmHeight), btmHeight },
        tWidth = { topLetWidth, imgWidth - topLetWidth - topRigWidth, topRigWidth,
            topLetWidth, imgWidth - topLetWidth - topRigWidth, topRigWidth,
            btmLetWidth, imgWidth - btmLetWidth - btmRigWidth, btmRigWidth },
        imgPath = imgPath,
        width = width,
        height = height,
        color = color,
        maskW = maskW,
        maskH = maskH,
        initX = initX,
        initY = initY,
        isFixPosX = isFixPosX,
    }

    if is1PixelW then
        regularNinePathImgGroup.yScale = params.height / imgHeight
    elseif is1PixelH then
        regularNinePathImgGroup.xScale = params.width / imgWidth
    end

    return regularNinePathImgGroup
end

local function findTakeFoucusView(obj)
    while obj and obj.parent do
        obj = obj.parent
        if obj.takeFocus then
            return obj
        end
    end
    return nil
end

-- 判断是否超出范围
local function isOutOfBounds(target, contentX, contentY)
    contentX = contentX or 0
    contentY = contentY or 0

    if target then
        local bounds = target.contentBounds

        if contentX < bounds.xMin or contentX > bounds.xMax or
            contentY < bounds.yMin or contentY > bounds.yMax then
            return true
        end

        return false
    end
end

function M.touchDelegate(params)
    --local trace = debug.traceback()
    local target = params.target
    local imageWidth = target.width * target.xScale --响应区域宽度
    local imageHeight = target.height * target.yScale --响应区域高度
    local vertices = params.vertices --响应区域点 (x,y,x,y,x,y……)
    local verticesOffsetXY = params.verticesOffsetXY or { -imageWidth / 2, -imageHeight / 2 }
    local verticesRotation = params.verticesRotation or 0
    local clickAreaAlpha = params.clickAreaAlpha or 0.01
    local polygonClick = target
    local polygonAnchorY = params.polygonAnchorY or 0
    local polygonAnchorX = params.polygonAnchorX or 0
    local notSetFocus = params.notSetFocus --多指触摸开启时，不设置焦点

    local notFocusScroll = params.notFocusScroll -- 不主动把焦点给scroolView

    local touchHandle = {} --句柄 用来调用一些方法

    if vertices then
        polygonClick = display.newPolygon(target.x + verticesOffsetXY[1], target.y + verticesOffsetXY[2], vertices)
        polygonClick.rotation = verticesRotation
        polygonClick.alpha = clickAreaAlpha
        polygonClick.anchorX, polygonClick.anchorY = polygonAnchorX, polygonAnchorY
        target.parent:insert(polygonClick)
        polygonClick.enabled = target.enabled
    end

    local function getEnable(target)
        local enabled = target.enabled
        if enabled == nil then
            enabled = true
        end
        return enabled
    end

    --设置触摸是否激活
    function touchHandle:setTouchEnabled(bFlag)
        target.enabled = bFlag
    end

    local function onTouch(event)
        local target = event.target
        local phase = event.phase
        local enabled = getEnable(target)

        if phase == "began" then
            if not notSetFocus then
                display.getCurrentStage():setFocus(target)
            end
            target.isFocus = true
            target.isTouch = true

            if params.onStateChange and enabled then
                params.onStateChange(1, event)
            end

            if params.onBegan and enabled then
                params.onBegan(event)
            end
        elseif target.isFocus then
            if phase == "moved" then
                local view = findTakeFoucusView(target) or params.view
                if (not notFocusScroll) and view and
                    (math.abs(event.x - event.xStart) > 10 or math.abs(event.y - event.yStart) > 10) then --支持scrollivew滑动
                    touchHandle:scrollTakeFocus(event, view)
                else
                    -- local centerX, centerY = target:contentToLocal(event.x, event.y)
                    -- local isBeyond = math.abs(centerX) >= target.width / 2 or math.abs(centerY) >= target.height / 2 --是否超出点击范围

                    local isBeyond = isOutOfBounds(target, event.x, event.y)
                    if isBeyond then -- 超出按钮范围
                        target.isTouch = false
                        if params.onStateChange and enabled then
                            params.onStateChange(0, event)
                        end
                    end

                    if params.onMoved and enabled then --范围外移动
                        params.onMoved(event, isBeyond)
                    end
                end
            elseif phase == "ended" or phase == "canceled" then
                display.getCurrentStage():setFocus(nil)
                target.isFocus = false

                if params.onStateChange and enabled then
                    params.onStateChange(0, event)
                end

                if target.isTouch and enabled then
                    if params.onRelease then
                        params.onRelease(event)
                    end
                else
                    if params.onEnded then
                        params.onEnded(event)
                    end
                end

                target.isTouch = false
            end
        end
        return true
    end

    function target:removeTouch()
        polygonClick:removeEventListener("touch", onTouch)
    end

    function touchHandle:addTouch()
        if target then
            polygonClick:addEventListener("touch", onTouch)
        end
    end

    touchHandle:addTouch()

    function touchHandle:scrollTakeFocus(event, view)
        local target = event.target
        local enabled = getEnable(target)

        if view.takeFocus then
            view:takeFocus(event)
        end
        target.isTouch = false

        if params.onStateChange and enabled then
            params.onStateChange(0, event)
        end

        if params.onCancelled then
            params.onCancelled(event)
        end
    end

    --是否不主动转移焦点
    function touchHandle:setNotFocusScroll(flag)
        notFocusScroll = flag
    end

    return touchHandle
end

return M
